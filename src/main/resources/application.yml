jwt:
  secret: ${JWT_SECRET_KEY:mySecretKeyForDevelopmentUseOnly12345678901234567890}
  access-token-validity-in-seconds: 3600  # 1시간
  refresh-token-validity-in-seconds: 604800  # 7일

spring:
  application:
    name: fraud-detection-server

  datasource:
    url: ${DB_URL:jdbc:mysql://localhost:3306/fraud_detection?useSSL=false&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true&autoReconnect=true}
    username: ${DB_USERNAME:fraud_user}
    password: ${DB_PASSWORD:rootpassword123}
    driver-class-name: com.mysql.cj.jdbc.Driver

    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 60000  # 60초로 연장
      max-lifetime: 1200000
      leak-detection-threshold: 60000
      validation-timeout: 30000  # 연결 검증 타임아웃
      initialization-fail-timeout: 60000  # 초기화 실패 타임아웃

  jpa:
    hibernate:
      ddl-auto: ${SPRING_JPA_HIBERNATE_DDL_AUTO:${DDL_AUTO:update}}
    show-sql: ${SPRING_JPA_SHOW_SQL:${JPA_SHOW_SQL:false}}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 1000
          batch_versioned_data: true
        order_inserts: true
        order_updates: true
        generate_statistics: false
    open-in-view: false

  data:
    redis:
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6379}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-wait: -1ms
          max-idle: 8
          min-idle: 0

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          ssl:
            trust: smtp.gmail.com
          timeout: 5000
          connectiontimeout: 5000
          writetimeout: 5000

server:
  port: 8080
  servlet:
    encoding:
      charset: UTF-8
      enabled: true
      force: true
    multipart:
      max-file-size: 2GB
      max-request-size: 2GB
      file-size-threshold: 10MB
  shutdown: graceful
  tomcat:
    connection-timeout: 600000  # 10분으로 연장
    keep-alive-timeout: 60000   # Keep-Alive 타임아웃
    max-keep-alive-requests: 100 # Keep-Alive 요청 수
    max-connections: 8192
    threads:
      max: 200
      min-spare: 10

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
      base-path: /actuator
  endpoint:
    health:
      show-details: ${MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS:${ACTUATOR_HEALTH_DETAILS:when-authorized}}
      probes:
        enabled: true

logging:
  level:
    com.credit.card.fraud.detection: ${LOG_LEVEL:INFO}
    org.springframework.security: ${SECURITY_LOG_LEVEL:WARN}
    org.springframework.mail: ${MAIL_LOG_LEVEL:INFO}
    org.hibernate.SQL: ${SQL_LOG_LEVEL:WARN}
    org.hibernate.type.descriptor.sql.BasicBinder: ${SQL_BIND_LOG_LEVEL:WARN}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %logger{36} - %msg%n"

app:
  email:
    verification:
      expiration: 300 # 5분 (초 단위)
      template:
        subject: "[신용카드 사기탐지 서비스] 이메일 인증 코드"
        content: |
          안녕하세요.

          신용카드 사기탐지 서비스 회원가입을 위한 인증 코드입니다.

          인증 코드: %s

          이 코드는 5분간 유효합니다.

          감사합니다.

model:
  service:
    enabled: ${MODEL_SERVICE_ENABLED:true}
    url: ${MODEL_SERVICE_URL:http://model:8000}
    timeout: ${MODEL_SERVICE_TIMEOUT:30000}
    retry:
      max-attempts: ${MODEL_SERVICE_RETRY_MAX_ATTEMPTS:3}
      delay: ${MODEL_SERVICE_RETRY_DELAY:1000}
    github:
      data-repo: ${MODEL_DATA_REPO:sookmyung-final-project-2025-1/Data}
      default-version: ${MODEL_DEFAULT_VERSION:v1.0.0}

---
# 개발 환경용
spring:
  config:
    activate:
      on-profile: development

logging:
  level:
    org.hibernate.type.descriptor.sql.BasicBinder: ${SQL_BIND_LOG_LEVEL:TRACE}

model:
  service:
    enabled: ${MODEL_SERVICE_ENABLED:false}  # 개발 환경에서는 시뮬레이션 사용
    url: ${MODEL_SERVICE_URL:http://localhost:8000}

---
# 테스트 환경용 (H2 In-Memory Database)
spring:
  config:
    activate:
      on-profile: test
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password: 
    driver-class-name: org.h2.Driver
  h2:
    console:
      enabled: true
      path: /h2-console
  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true
    defer-datasource-initialization: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
  data:
    redis:
      host: localhost  # Redis 없이 실행
      port: 6379
      timeout: 1000ms
  mail:
    host: localhost
    port: 25
    username: test
    password: test
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration

model:
  service:
    enabled: false  # 테스트 환경에서는 항상 시뮬레이션 사용

---
# 운영 환경용
spring:
  config:
    activate:
      on-profile: production
  jpa:
    hibernate:
      ddl-auto: update

logging:
  level:
    root: ${ROOT_LOG_LEVEL:WARN}

management:
  endpoint:
    env:
      show-values: never  # 환경변수 값 숨기기
    configprops:
      show-values: never  # 설정 프로퍼티 값 숨기기