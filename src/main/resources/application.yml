jwt:
  secret: ${JWT_SECRET_KEY}
  access-token-validity-in-seconds: 3600  # 1시간
  refresh-token-validity-in-seconds: 604800  # 7일

spring:
  application:
    name: fraud-detection-server

  datasource:
    url: ${DB_URL:jdbc:mysql://localhost:3306/fraud_detection?useSSL=false&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true&autoReconnect=true}
    username: ${DB_USERNAME:fraud_user}
    password: ${DB_PASSWORD:rootpassword123}
    driver-class-name: com.mysql.cj.jdbc.Driver
    
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      max-lifetime: 1200000
      leak-detection-threshold: 60000

  jpa:
    hibernate:
      ddl-auto: ${DDL_AUTO:update}
    show-sql: ${JPA_SHOW_SQL:false}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: true
        use_sql_comments: true
    open-in-view: false

  data:
    redis:
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6379}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-wait: -1ms
          max-idle: 8
          min-idle: 0

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          ssl:
            trust: smtp.gmail.com
          timeout: 5000
          connectiontimeout: 5000
          writetimeout: 5000

server:
  port: 8080
  servlet:
    encoding:
      charset: UTF-8
      enabled: true
      force: true
  shutdown: graceful
  tomcat:
    connection-timeout: 20000
    max-connections: 8192
    threads:
      max: 200
      min-spare: 10

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
      base-path: /actuator
  endpoint:
    health:
      show-details: ${ACTUATOR_HEALTH_DETAILS:when-authorized}
      probes:
        enabled: true

logging:
  level:
    com.credit.card.fraud.detection: ${LOG_LEVEL:INFO}
    org.springframework.security: ${SECURITY_LOG_LEVEL:WARN}
    org.springframework.mail: ${MAIL_LOG_LEVEL:INFO}
    org.hibernate.SQL: ${SQL_LOG_LEVEL:WARN}
    org.hibernate.type.descriptor.sql.BasicBinder: ${SQL_BIND_LOG_LEVEL:WARN}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %logger{36} - %msg%n"

app:
  email:
    verification:
      expiration: 300 # 5분 (초 단위)
      template:
        subject: "[신용카드 사기탐지 서비스] 이메일 인증 코드"
        content: |
          안녕하세요.
          
          신용카드 사기탐지 서비스 회원가입을 위한 인증 코드입니다.
          
          인증 코드: %s
          
          이 코드는 5분간 유효합니다.
          
          감사합니다.

---
# 개발 환경용
spring:
  config:
    activate:
      on-profile: development

logging:
  level:
    org.hibernate.type.descriptor.sql.BasicBinder: ${SQL_BIND_LOG_LEVEL:TRACE}

---
# 운영 환경용
spring:
  config:
    activate:
      on-profile: production

logging:
  level:
    root: ${ROOT_LOG_LEVEL:WARN}

management:
  endpoint:
    env:
      show-values: never  # 환경변수 값 숨기기
    configprops:
      show-values: never  # 설정 프로퍼티 값 숨기기