name: Deploy to Raspberry Pi

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4
        with:
          path: backend

      - name: Build and Deploy
        working-directory: ./backend
        run: |
          echo "=== 배포 시작 ==="
          
          # 환경 변수 확인
          ENVIRONMENT=${DEPLOYMENT_ENV:-production}
          echo "배포 환경: $ENVIRONMENT"
          
          # Gradle 캐시 정리
          rm -rf .gradle/ build/ || true
          
          # 환경 변수 파일 확인
          if [ ! -f .env ]; then
            echo "Creating .env file from example"
            cp .env.example .env
          fi
          
          # 기존 이미지 강제 삭제
          sudo docker rmi fraud-detection-app:latest || true
          
          # Docker 빌드 캐시 정리
          sudo docker builder prune -f || true
          
          # Docker 이미지 빌드
          docker build --no-cache --pull -t fraud-detection-app:latest .
          
          # 시스템 nginx 중지
          sudo systemctl stop nginx || true
          
          # 기존 컨테이너 정리
          sudo docker compose down || true
          
          # 개발 환경에서만 볼륨 삭제 (운영 환경에서는 데이터 보존)
          if [ "$ENVIRONMENT" = "development" ]; then
            echo "개발 환경: MySQL 볼륨 초기화"
            sudo docker volume rm backend_mysql_data || true
          else
            echo "운영 환경: MySQL 데이터 보존"
          fi
          
          # DB 사용자 권한 체크 및 수정 스크립트 실행
          echo "=== DB 권한 체크 및 수정 ==="
          ./scripts/check-and-fix-db-permissions.sh || true
          
          # 새 컨테이너 시작
          sudo docker compose up -d --force-recreate
          
          # 앱 헬스 체크 (최대 60초 대기)
          echo "=== 앱 헬스 체크 ==="
          for i in {1..12}; do
            if curl -f http://localhost/actuator/health >/dev/null 2>&1; then
              echo "앱이 정상적으로 시작되었습니다"
              break
            fi
            echo "앱 시작 대기 중... ($i/12)"
            sleep 5
          done
          
          # 정리
          docker image prune -f || true
          
          # 상태 확인
          sudo docker compose ps
          echo "=== 배포 완료 ==="