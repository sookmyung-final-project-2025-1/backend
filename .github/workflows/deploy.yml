name: Deploy to Raspberry Pi

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'

    concurrency:
      group: deploy-app
      cancel-in-progress: true

    steps:
      - name: Clean workspace permissions
        run: |
          sudo chown -R $USER:$USER /home/1117mg/actions-runner/_work/backend/backend || true
          sudo chmod -R u+w /home/1117mg/actions-runner/_work/backend/backend || true

      - uses: actions/checkout@v4
        with:
          clean: true

      - name: Docker login
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USER }}" --password-stdin

      - name: Build application
        run: |
          sudo apt-get update && sudo apt-get install -y openjdk-17-jdk-headless
          chmod +x ./gradlew
          ./gradlew bootJar -x test --no-daemon

      - name: Get latest model release
        id: get_latest_release
        run: |
          # Data 레포에서 최신 릴리즈 정보 가져오기
          LATEST_RELEASE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/sookmyung-final-project-2025-1/Data/releases/latest" | \
            grep -o '"tag_name":"[^"]*"' | cut -d'"' -f4 || echo "v1.0.0")
          if [ -z "$LATEST_RELEASE" ]; then
            LATEST_RELEASE="v1.0.0"
          fi
          echo "latest_release=$LATEST_RELEASE" >> $GITHUB_OUTPUT
          echo "Latest model release: $LATEST_RELEASE"

      - name: Create production environment
        run: |
          cat > .env <<'EOF'
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          DB_URL=${{ secrets.DB_URL }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD="${{ secrets.MAIL_PASSWORD }}"
          REDIS_HOST=redis
          REDIS_PORT=6379
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          SPRING_PROFILES_ACTIVE=production
          SPRING_JPA_HIBERNATE_DDL_AUTO=update
          SPRING_JPA_SHOW_SQL=true
          MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
          MODEL_SERVICE_ENABLED=true
          MODEL_SERVICE_URL=${{ secrets.MODEL_SERVICE_URL }}
          MODEL_DIR=/app/models
          MODEL_VERSION=${{ steps.get_latest_release.outputs.latest_release }}
          GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPO=sookmyung-final-project-2025-1/Data
          APP_IMAGE=fraud-detection-app:latest
          MODEL_IMAGE=ghcr.io/sookmyung-final-project-2025-1/fraud-model:latest
          EOF

      - name: Build and deploy
        run: |
          # Build image
          sudo docker build --no-cache -t fraud-detection-app:latest .
          
          # Setup SSL
          chmod +x ./setup-ssl.sh && sudo ./setup-ssl.sh
          
          # Stop conflicting services
          sudo systemctl stop nginx || true
          
          # Deploy
          sudo docker compose down || true
          sudo docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d --force-recreate
          
          # Health check
          for i in {1..24}; do
            if curl -fsSLk http://localhost/actuator/health >/dev/null 2>&1; then
              echo "Deployment successful"
              exit 0
            fi
            echo "Waiting for app... ($i/24)"
            sleep 5
          done
          
          echo "Deployment failed - showing logs:"
          sudo docker compose logs --tail=50
          exit 1

      - name: Cleanup
        if: always()
        run: sudo docker image prune -f || true