name: Deploy to Raspberry Pi

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'

    concurrency:
      group: deploy-app
      cancel-in-progress: true

    steps:
      - name: 작업공간 권한 정리
        run: |
          sudo chown -R $USER:$USER /home/1117mg/actions-runner/_work/backend/backend || true
          sudo chmod -R u+w /home/1117mg/actions-runner/_work/backend/backend || true

      - uses: actions/checkout@v4
        with:
          path: .
          ref: main
          fetch-depth: 0
          clean: true

      - name: Verify compose files
        working-directory: .
        run: |
          pwd && ls -al
          test -f docker-compose.yml
          test -f docker-compose.prod.yml

      - name: Docker login (for pulling model image)
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USER }}" --password-stdin

      - name: Pull model image (optional)
        working-directory: .
        run: |
          if grep -q '^MODEL_IMAGE=' .env 2>/dev/null; then
            IMG=$(grep '^MODEL_IMAGE=' .env | tail -n1 | cut -d= -f2-)
            echo "Pulling $IMG"
            sudo docker pull "$IMG" || true
          else
            echo "No MODEL_IMAGE in .env; skip pulling"
          fi

      - name: Build and Deploy
        working-directory: .
        run: |
          echo "=== 배포 시작 ==="
          ENVIRONMENT=${DEPLOYMENT_ENV:-prod}
          echo "배포 환경: $ENVIRONMENT"

          rm -rf .gradle/ build/ || true
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk-headless
          chmod +x ./gradlew
          ./gradlew bootJar -x test --no-daemon

          # .env.prod 생성
          cat > .env.prod <<'EOF'
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          DB_URL=${{ secrets.DB_URL }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD="${{ secrets.MAIL_PASSWORD }}"
          REDIS_HOST=redis
          REDIS_PORT=6379
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          SPRING_PROFILES_ACTIVE=production
          DEPLOYMENT_ENV=prod
          DDL_AUTO=validate
          JPA_SHOW_SQL=false
          ACTUATOR_HEALTH_DETAILS=when-authorized
          SPRING_JPA_HIBERNATE_DDL_AUTO=update
          SPRING_JPA_SHOW_SQL=true
          MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
          MODEL_DIR=/app/models/v1
          MODEL_VERSION=v1
          DOCKERHUB_USER=${{ secrets.DOCKERHUB_USER }}
          EOF
          echo 'APP_IMAGE=fraud-detection-app:latest' >> .env.prod

          # 기존 .env의 MODEL_IMAGE가 있으면 유지
          if [ -f .env ] && grep -q '^MODEL_IMAGE=' .env; then
            CURR_MODEL_IMAGE=$(grep '^MODEL_IMAGE=' .env | tail -n1 | cut -d= -f2-)
            echo "MODEL_IMAGE=$CURR_MODEL_IMAGE" >> .env.prod
          else
            echo "MODEL_IMAGE=${{ secrets.DOCKERHUB_USER }}/fraud-model:v1.0.0" >> .env.prod
          fi

          # .env 갱신
          cp .env.prod .env

          # 이미지 빌드
          sudo docker rmi fraud-detection-app:latest || true
          sudo docker builder prune -f || true
          docker build --no-cache --pull -t fraud-detection-app:latest .

          echo "=== SSL 인증서 생성 ==="
          chmod +x ./setup-ssl.sh
          sudo ./setup-ssl.sh

          # 호스트 nginx 중지(포트 충돌 방지)
          sudo systemctl stop nginx || true

          # 스택 재기동
          sudo docker compose -f docker-compose.yml -f docker-compose.prod.yml down || true
          sudo docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d --force-recreate

          # 앱 헬스 체크
          echo "=== 앱 헬스 체크 ==="
          ok=false
          for i in {1..12}; do
            if curl -fsSLk http://localhost/actuator/health >/dev/null 2>&1; then
              echo "앱이 정상적으로 시작되었습니다"
              ok=true
              break
            fi
            echo "앱 시작 대기 중... ($i/12)"; sleep 5
          done
          if [ "$ok" != "true" ] ; then
            echo "=== docker compose ps ==="
            sudo docker compose -f docker-compose.yml -f docker-compose.prod.yml ps || true
            echo "=== nginx logs ==="
            NGINX_ID=$(sudo docker compose -f docker-compose.yml -f docker-compose.prod.yml ps -q nginx || true)
            [ -n "$NGINX_ID" ] && sudo docker logs "$NGINX_ID" --tail=200 || echo "nginx container not found"
            echo "=== app logs ==="
            APP_ID=$(sudo docker compose -f docker-compose.yml -f docker-compose.prod.yml ps -q app || true)
            [ -n "$APP_ID" ] && sudo docker logs "$APP_ID" --tail=200 || echo "app container not found"
            exit 1
          fi

          docker image prune -f || true
          sudo docker compose -f docker-compose.yml -f docker-compose.prod.yml ps
          echo "=== 배포 완료 ==="
