name: Deploy to Raspberry Pi

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4
        with:
          path: backend

      - name: Build and Deploy
        working-directory: ./backend
        run: |
          echo "=== 배포 시작 ==="
          
          # 환경 변수 확인
          ENVIRONMENT=${DEPLOYMENT_ENV:-prod}
          echo "배포 환경: $ENVIRONMENT"
          
          # Gradle 캐시 정리
          rm -rf .gradle/ build/ || true
          
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk-headless
          chmod +x ./gradlew
          ./gradlew bootJar -x test --no-daemon
          
          # Github Secrets
          cat > .env.prod <<'EOF'
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          DB_URL=${{ secrets.DB_URL }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD="${{ secrets.MAIL_PASSWORD }}"
          REDIS_HOST=redis
          REDIS_PORT=6379
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          SPRING_PROFILES_ACTIVE=production
          DEPLOYMENT_ENV=prod
          DDL_AUTO=validate
          JPA_SHOW_SQL=false
          ACTUATOR_HEALTH_DETAILS=when-authorized
          EOF
          
          echo 'APP_IMAGE=fraud-detection-app:latest' >> .env.prod
          touch .env
          
          # 기존 이미지 강제 삭제
          sudo docker rmi fraud-detection-app:latest || true
          
          # Docker 빌드 캐시 정리
          sudo docker builder prune -f || true
          
          # Docker 이미지 빌드
          docker build --no-cache --pull -t fraud-detection-app:latest .
          
          # 시스템 nginx 중지
          sudo systemctl stop nginx || true
          
          # 기존 컨테이너 정리
          sudo docker compose -f docker-compose.yml -f docker-compose.prod.yml down || true
          
          # 개발 환경에서만 볼륨 삭제 (운영 환경에서는 데이터 보존)
          if [ "$ENVIRONMENT" = "development" ]; then
            echo "개발 환경: MySQL 볼륨 초기화"
            sudo docker volume rm backend_mysql_data || true
          else
            echo "운영 환경: MySQL 데이터 보존"
          fi
          
          # DB 사용자 권한 체크 및 수정 스크립트 실행
          echo "=== DB 권한 체크 및 수정 ==="
          ./scripts/check-and-fix-db-permissions.sh || true
          
          if [ ! -f nginx/ssl/cert.pem ] || [ ! -f nginx/ssl/key.pem ]; then
          echo "Generating self-signed cert (prod without real cert)"
          mkdir -p nginx/ssl
          openssl req -x509 -newkey rsa:2048 -nodes \
            -keyout nginx/ssl/key.pem -out nginx/ssl/cert.pem \
            -days 365 -subj "/CN=$(hostname -f || echo localhost)"
          fi
          
          # 새 컨테이너 시작
          sudo docker compose --env-file .env.prod \
            -f docker-compose.yml -f docker-compose.prod.yml \
            up -d --force-recreate
  
          echo "=== 앱 헬스 체크 ==="
          for i in {1..12}; do
          if ! curl -fsSLk http://localhost/actuator/health >/dev/null 2>&1; then
            echo "=== nginx logs ===";  sudo docker logs $(sudo docker compose ps -q nginx) --tail=200 || true
            echo "=== app logs ===";    sudo docker logs $(sudo docker compose ps -q app) --tail=200 || true
            exit 1
          fi
            echo "앱 시작 대기 중... ($i/12)"
            sleep 5
          done
          
          echo "=== Public IP (WAN) ==="
          echo "WAN IPv4: $(curl -fsS -4 ifconfig.me || echo 'unknown')"
          echo "WAN via OpenDNS: $(dig +short myip.opendns.com @resolver1.opendns.com 2>/dev/null || echo 'n/a')"
          echo "Local IPs: $(hostname -I 2>/dev/null || echo 'n/a')"
          
          # 정리
          docker image prune -f || true
          
          # 상태 확인
          sudo docker compose ps
          echo "=== 배포 완료 ==="